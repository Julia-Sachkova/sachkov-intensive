import { Reactive, Ref, ShallowReactive, ComponentInternalInstance, ComputedRef } from 'vue';

// Use a symbol for inject provide to avoid any kind of collision with another lib
// https://vuejs.org/guide/components/provide-inject#working-with-symbol-keys
declare const injectCarousel = Symbol('carousel') as InjectionKey<
  InjectedCarousel | undefined
>

type Breakpoints = {
  [key: number]: Partial<
    Omit<CarouselConfig, 'breakpoints' | 'modelValue' | 'breakpointMode'>
  >
}

type SnapAlign = (typeof SNAP_ALIGN_OPTIONS)[number]

type Dir = (typeof DIR_OPTIONS)[number]

type BreakpointMode = (typeof BREAKPOINT_MODE_OPTIONS)[number]

type NormalizedDir = (typeof NORMALIZED_DIR_OPTIONS)[number]

type NonNormalizedDir = keyof typeof DIR_MAP

type I18nKeys = keyof typeof I18N_DEFAULT_CONFIG

interface CarouselConfig {
  enabled: boolean
  itemsToShow: number
  itemsToScroll: number
  modelValue?: number
  transition?: number
  gap: number
  autoplay?: number
  snapAlign: SnapAlign
  wrapAround?: boolean
  pauseAutoplayOnHover?: boolean
  mouseDrag?: boolean
  touchDrag?: boolean
  dir?: Dir
  breakpointMode?: BreakpointMode
  breakpoints?: Breakpoints
  height: string | number
  i18n: { [key in I18nKeys]?: string }
  ignoreAnimations: boolean | string[] | string
}

type VueClass = string | Record<string, boolean> | VueClass[]

declare const SNAP_ALIGN_OPTIONS = ['center', 'start', 'end', 'center-even', 'center-odd'] as const
declare const BREAKPOINT_MODE_OPTIONS = ['viewport', 'carousel'] as const
declare const DIR_OPTIONS = [
  'ltr',
  'left-to-right',
  'rtl',
  'right-to-left',
  'ttb',
  'top-to-bottom',
  'btt',
  'bottom-to-top',
] as const
declare const I18N_DEFAULT_CONFIG = {
  ariaNextSlide: 'Navigate to next slide',
  ariaPreviousSlide: 'Navigate to previous slide',
  ariaNavigateToSlide: 'Navigate to slide {slideNumber}',
  ariaNavigateToPage: 'Navigate to page {slideNumber}',
  ariaGallery: 'Gallery',
  itemXofY: 'Item {currentSlide} of {slidesCount}',
  iconArrowUp: 'Arrow pointing upwards',
  iconArrowDown: 'Arrow pointing downwards',
  iconArrowRight: 'Arrow pointing to the right',
  iconArrowLeft: 'Arrow pointing to the left',
} as const

declare const DIR_MAP = {
  'left-to-right': 'ltr',
  'right-to-left': 'rtl',
  'top-to-bottom': 'ttb',
  'bottom-to-top': 'btt',
} as const

declare const NORMALIZED_DIR_OPTIONS = Object.values(DIR_MAP)

declare const DEFAULT_CONFIG: CarouselConfig = {
  enabled: true,
  itemsToShow: 1,
  itemsToScroll: 1,
  modelValue: 0,
  transition: 300,
  autoplay: 0,
  gap: 0,
  height: 'auto',
  wrapAround: false,
  pauseAutoplayOnHover: false,
  mouseDrag: true,
  touchDrag: true,
  snapAlign: SNAP_ALIGN_OPTIONS[0],
  dir: DIR_OPTIONS[0],
  breakpointMode: BREAKPOINT_MODE_OPTIONS[0],
  breakpoints: undefined,
  i18n: I18N_DEFAULT_CONFIG,
  ignoreAnimations: false,
}

interface CarouselNav {
  slideTo: (index: number) => void
  next: (skipTransition?: boolean) => void
  prev: (skipTransition?: boolean) => void
}

type InjectedCarousel = Reactive<{
  config: CarouselConfig
  viewport: Ref<Element | null>
  slides: ShallowReactive<Array<ComponentInternalInstance>>
  slidesCount: ComputedRef<number>
  clonedSlidesCount: ComputedRef<number>
  currentSlide: Ref<number>
  scrolledIndex: Ref<number>
  maxSlide: ComputedRef<number>
  minSlide: ComputedRef<number>
  slideSize: Ref<number>
  isVertical: ComputedRef<boolean>
  normalizedDir: ComputedRef<NormalizedDir>
  nav: CarouselNav
  isSliding: Ref<boolean>
  registerSlide: (
    slide: ComponentInternalInstance,
    indexCb: (idx: number) => void
  ) => void
  unregisterSlide: (slide: ComponentInternalInstance) => void
}>

interface CarouselData {
  config: CarouselConfig
  slidesCount: Ref<number>
  slideSize: Ref<number>
  currentSlide: Ref<number>
  maxSlide: Ref<number>
  minSlide: Ref<number>
  middleSlide: Ref<number>
}

interface CarouselMethods extends CarouselNav {
  updateBreakpointsConfig: () => void
  updateSlidesData: () => void
  updateSlideSize: () => void
  restartCarousel: () => void
}
interface CarouselExposed extends CarouselMethods {
  nav: CarouselNav
  data: Reactive<CarouselData>
}

declare const Carousel = defineComponent({
  name: 'VueCarousel',
  props: carouselProps,
  emits: [
    'init',
    'drag',
    'slide-start',
    'loop',
    'update:modelValue',
    'slide-end',
    'before-init',
  ],
  setup(props: CarouselConfig, { slots, emit, expose }: SetupContext) {
    const root: Ref<Element | null> = ref(null)
    const viewport: Ref<Element | null> = ref(null)
    const slides = shallowReactive<Array<ComponentInternalInstance>>([])
    const slideSize: Ref<number> = ref(0)
    const slidesCount = computed(() => slides.length)

    const fallbackConfig = computed(() => ({
      ...DEFAULT_CONFIG,
      // Avoid reactivity tracking in breakpoints and vModel which would trigger unnecessary updates
      ...except(props, ['breakpoints', 'modelValue']),
      i18n: { ...DEFAULT_CONFIG.i18n, ...props.i18n },
    }))

    // current active config
    const config = reactive<CarouselConfig>({ ...fallbackConfig.value })

    // slides
    const currentSlideIndex = ref(props.modelValue ?? 0)
    const prevSlideIndex = ref(0)
    const middleSlideIndex = computed(() => Math.ceil((slidesCount.value - 1) / 2))
    const maxSlideIndex = computed(() => {
      return getMaxSlideIndex({ config, slidesCount: slidesCount.value })
    })
    const minSlideIndex = computed(() => {
      return getMinSlideIndex({ config, slidesCount: slidesCount.value })
    })

    let autoplayTimer: ReturnType<typeof setInterval> | null = null
    let transitionTimer: ReturnType<typeof setTimeout> | null = null
    let resizeObserver: ResizeObserver | null = null

    const effectiveSlideSize = computed(() => slideSize.value + config.gap)

    const normalizedDir = computed<NormalizedDir>(() => {
      const dir = config.dir || 'ltr'
      return dir in DIR_MAP ? DIR_MAP[dir as NonNormalizedDir] : (dir as NormalizedDir)
    })

    const indexCbs: Array<(index: number) => void> = []
    const registerSlide: InjectedCarousel['registerSlide'] = (slide, indexCb) => {
      indexCb(slides.length)
      slides.push(slide)
      indexCbs.push(indexCb)
    }

    const unregisterSlide: InjectedCarousel['unregisterSlide'] = (slide) => {
      const found = slides.indexOf(slide)
      if (found >= 0) {
        slides.splice(found, 1)
        indexCbs.splice(found, 1)
        // Update indexes after the one that was removed
        indexCbs.slice(found).forEach((cb, index) => cb(found + index))
      }
    }

    const isReversed = computed(() => ['rtl', 'btt'].includes(normalizedDir.value))
    const isVertical = computed(() => ['ttb', 'btt'].includes(normalizedDir.value))

    const clonedSlidesCount = computed(() => Math.ceil(config.itemsToShow) + 1)

    function updateBreakpointsConfig(): void {
      if (!mounted.value) {
        return
      }
      // Determine the width source based on the 'breakpointMode' config
      const widthSource =
        (fallbackConfig.value.breakpointMode === 'carousel'
          ? root.value?.getBoundingClientRect().width
          : typeof window !== 'undefined'
            ? window.innerWidth
            : 0) || 0

      const breakpointsArray = Object.keys(props.breakpoints || {})
        .map((key) => Number(key))
        .sort((a, b) => +b - +a)

      const newConfig: Partial<CarouselConfig> = {}
      breakpointsArray.some((breakpoint) => {
        if (widthSource >= breakpoint) {
          Object.assign(newConfig, props.breakpoints![breakpoint])
          if (newConfig.i18n) {
            Object.assign(
              newConfig.i18n,
              fallbackConfig.value.i18n,
              props.breakpoints![breakpoint].i18n
            )
          }
          return true
        }
        return false
      })

      Object.assign(config, fallbackConfig.value, newConfig)
    }

    const handleResize = throttle(() => {
      updateBreakpointsConfig()
      updateSlidesData()
      updateSlideSize()
    })

    const totalGap = computed(() => (config.itemsToShow - 1) * config.gap)
    const transformElements = shallowReactive<Set<HTMLElement>>(new Set())

    /**
     * Setup functions
     */
    function updateSlideSize(): void {
      if (!viewport.value) return
      let multiplierWidth = 1
      transformElements.forEach((el) => {
        const transformArr = getTransformValues(el)

        if (transformArr.length === 6) {
          multiplierWidth *= transformArr[0]
        }
      })

      // Calculate size based on orientation
      if (isVertical.value) {
        if (config.height !== 'auto') {
          const height =
            typeof config.height === 'string' && isNaN(parseInt(config.height))
              ? viewport.value.getBoundingClientRect().height
              : parseInt(config.height as string)

          slideSize.value = (height - totalGap.value) / config.itemsToShow
        }
      } else {
        const width = viewport.value.getBoundingClientRect().width
        slideSize.value = (width / multiplierWidth - totalGap.value) / config.itemsToShow
      }
    }

    function updateSlidesData(): void {
      if (!config.wrapAround && slidesCount.value > 0) {
        currentSlideIndex.value = getNumberInRange({
          val: currentSlideIndex.value,
          max: maxSlideIndex.value,
          min: minSlideIndex.value,
        })
      }
    }

    const ignoreAnimations = computed<false | string[]>(() => {
      if (typeof props.ignoreAnimations === 'string') {
        return props.ignoreAnimations.split(',')
      } else if (Array.isArray(props.ignoreAnimations)) {
        return props.ignoreAnimations
      } else if (!props.ignoreAnimations) {
        return []
      }
      return false
    })

    watchEffect(() => updateSlidesData())

    watchEffect(() => {
      // Call updateSlideSize when viewport is ready and track deps
      updateSlideSize()
    })

    let animationInterval: number

    const setAnimationInterval = (event: AnimationEvent) => {
      const target = event.target as HTMLElement
      if (
        !target?.contains(root.value) ||
        (Array.isArray(ignoreAnimations.value) &&
          ignoreAnimations.value.includes(event.animationName))
      ) {
        return
      }

      transformElements.add(target)
      if (!animationInterval) {
        const stepAnimation = () => {
          animationInterval = requestAnimationFrame(() => {
            updateSlideSize()
            stepAnimation()
          })
        }
        stepAnimation()
      }
    }
    const finishAnimation = (event: AnimationEvent | TransitionEvent) => {
      const target = event.target as HTMLElement
      if (target) {
        transformElements.delete(target)
      }
      if (animationInterval && transformElements.size === 0) {
        cancelAnimationFrame(animationInterval)
        updateSlideSize()
      }
    }

    const mounted = ref(false)

    if (typeof document !== 'undefined') {
      watchEffect(() => {
        if (mounted.value && ignoreAnimations.value !== false) {
          document.addEventListener('animationstart', setAnimationInterval)
          document.addEventListener('animationend', finishAnimation)
        } else {
          document.removeEventListener('animationstart', setAnimationInterval)
          document.removeEventListener('animationend', finishAnimation)
        }
      })
    }

    onMounted((): void => {
      mounted.value = true
      updateBreakpointsConfig()
      initAutoplay()

      if (root.value) {
        resizeObserver = new ResizeObserver(handleResize)
        resizeObserver.observe(root.value)
      }

      emit('init')
    })

    onBeforeUnmount(() => {
      mounted.value = false
      // Empty the slides before they unregister for better performance
      slides.splice(0, slides.length)
      indexCbs.splice(0, indexCbs.length)

      if (transitionTimer) {
        clearTimeout(transitionTimer)
      }
      if (animationInterval) {
        cancelAnimationFrame(animationInterval)
      }
      if (autoplayTimer) {
        clearInterval(autoplayTimer)
      }
      if (resizeObserver) {
        resizeObserver.disconnect()
        resizeObserver = null
      }

      if (typeof document !== 'undefined') {
        handleBlur()
      }
      if (root.value) {
        root.value.removeEventListener('transitionend', updateSlideSize)
        root.value.removeEventListener('animationiteration', updateSlideSize)
      }
    })

    /**
     * Carousel Event listeners
     */
    let isTouch = false
    const startPosition = { x: 0, y: 0 }
    const dragged = reactive({ x: 0, y: 0 })
    const isHover = ref(false)
    const isDragging = ref(false)

    const handleMouseEnter = (): void => {
      isHover.value = true
    }
    const handleMouseLeave = (): void => {
      isHover.value = false
    }

    const handleArrowKeys = throttle((event: KeyboardEvent): void => {
      if (event.ctrlKey) return
      switch (event.key) {
        case 'ArrowLeft':
        case 'ArrowUp':
          if (isVertical.value === event.key.endsWith('Up')) {
            if (isReversed.value) {
              nav.next(true)
            } else {
              nav.prev(true)
            }
          }
          break
        case 'ArrowRight':
        case 'ArrowDown':
          if (isVertical.value === event.key.endsWith('Down')) {
            if (isReversed.value) {
              nav.prev(true)
            } else {
              nav.next(true)
            }
          }
          break
      }
    }, 200)
    const handleFocus = (): void => {
      document.addEventListener('keydown', handleArrowKeys)
    }
    const handleBlur = (): void => {
      document.removeEventListener('keydown', handleArrowKeys)
    }

    function handleDragStart(event: MouseEvent | TouchEvent): void {
      // Prevent drag initiation on input elements or if already sliding
      const targetTagName = (event.target as HTMLElement).tagName
      if (['INPUT', 'TEXTAREA', 'SELECT'].includes(targetTagName) || isSliding.value) {
        return
      }

      // Detect if the event is a touchstart or mousedown event
      isTouch = event.type === 'touchstart'

      // For mouse events, prevent default to avoid text selection
      if (!isTouch) {
        event.preventDefault()
        if ((event as MouseEvent).button !== 0) {
          // Ignore non-left-click mouse events
          return
        }
      }

      // Initialize start positions for the drag
      startPosition.x = 'touches' in event ? event.touches[0].clientX : event.clientX
      startPosition.y = 'touches' in event ? event.touches[0].clientY : event.clientY

      // Attach event listeners for dragging and drag end

      const moveEvent = isTouch ? 'touchmove' : 'mousemove'
      const endEvent = isTouch ? 'touchend' : 'mouseup'
      document.addEventListener(moveEvent, handleDragging, { passive: false })
      document.addEventListener(endEvent, handleDragEnd, { passive: true })
    }

    const handleDragging = throttle((event: TouchEvent | MouseEvent): void => {
      isDragging.value = true

      // Get the current position based on the interaction type (touch or mouse)
      const currentX = 'touches' in event ? event.touches[0].clientX : event.clientX
      const currentY = 'touches' in event ? event.touches[0].clientY : event.clientY

      // Calculate deltas for X and Y axes
      const deltaX = currentX - startPosition.x
      const deltaY = currentY - startPosition.y

      // Update dragged state reactively
      dragged.x = deltaX
      dragged.y = deltaY

      // Emit a drag event for further customization if needed
      emit('drag', { deltaX, deltaY })
    })

    function handleDragEnd(): void {
      handleDragging.cancel()

      // Determine the active axis and direction multiplier
      const dragAxis = isVertical.value ? 'y' : 'x'
      const directionMultiplier = isReversed.value ? -1 : 1

      // Calculate dragged slides with a tolerance to account for incomplete drags
      const tolerance = Math.sign(dragged[dragAxis]) * 0.4 // Smooth out small drags
      const draggedSlides =
        Math.round(dragged[dragAxis] / effectiveSlideSize.value + tolerance) *
        directionMultiplier

      // Prevent accidental clicks when there is a slide drag
      if (draggedSlides && !isTouch) {
        const preventClick = (e: MouseEvent) => {
          e.preventDefault()
          window.removeEventListener('click', preventClick)
        }
        window.addEventListener('click', preventClick)
      }

      // Slide to the appropriate slide index
      const targetSlideIndex = currentSlideIndex.value - draggedSlides
      slideTo(targetSlideIndex)

      // Reset drag state
      dragged.x = 0
      dragged.y = 0
      isDragging.value = false

      const moveEvent = isTouch ? 'touchmove' : 'mousemove'
      const endEvent = isTouch ? 'touchend' : 'mouseup'
      document.removeEventListener(moveEvent, handleDragging)
      document.removeEventListener(endEvent, handleDragEnd)
    }

    /**
     * Autoplay
     */
    function initAutoplay(): void {
      if (!config.autoplay || config.autoplay <= 0) {
        return
      }

      autoplayTimer = setInterval(() => {
        if (config.pauseAutoplayOnHover && isHover.value) {
          return
        }

        next()
      }, config.autoplay)
    }

    function stopAutoplay(): void {
      if (autoplayTimer) {
        clearInterval(autoplayTimer)
        autoplayTimer = null
      }
    }

    function resetAutoplay(): void {
      stopAutoplay()
      initAutoplay()
    }

    /**
     * Navigation function
     */
    const isSliding = ref(false)

    function slideTo(slideIndex: number, skipTransition = false): void {
      const currentVal = config.wrapAround
        ? slideIndex
        : getNumberInRange({
            val: slideIndex,
            max: maxSlideIndex.value,
            min: minSlideIndex.value,
          })

      if (
        currentSlideIndex.value === currentVal ||
        (!skipTransition && isSliding.value)
      ) {
        return
      }

      emit('slide-start', {
        slidingToIndex: slideIndex,
        currentSlideIndex: currentSlideIndex.value,
        prevSlideIndex: prevSlideIndex.value,
        slidesCount: slidesCount.value,
      })

      stopAutoplay()
      isSliding.value = true
      prevSlideIndex.value = currentSlideIndex.value

      const mappedNumber = config.wrapAround
        ? mapNumberToRange({
            val: currentVal,
            max: maxSlideIndex.value,
            min: 0,
          })
        : currentVal
      currentSlideIndex.value = currentVal
      if (mappedNumber !== currentVal) {
        modelWatcher.pause()
      }
      emit('update:modelValue', mappedNumber)

      transitionTimer = setTimeout((): void => {
        if (config.wrapAround) {
          if (mappedNumber !== currentVal) {
            modelWatcher.resume()
            currentSlideIndex.value = mappedNumber
            emit('loop', {
              currentSlideIndex: currentSlideIndex.value,
              slidingToIndex: slideIndex,
            })
          }
        }

        emit('slide-end', {
          currentSlideIndex: currentSlideIndex.value,
          prevSlideIndex: prevSlideIndex.value,
          slidesCount: slidesCount.value,
        })

        isSliding.value = false
        resetAutoplay()
      }, config.transition)
    }

    function next(skipTransition = false): void {
      slideTo(currentSlideIndex.value + config.itemsToScroll, skipTransition)
    }

    function prev(skipTransition = false): void {
      slideTo(currentSlideIndex.value - config.itemsToScroll, skipTransition)
    }

    const nav: CarouselNav = { slideTo, next, prev }

    const scrolledIndex = computed(() =>
      getScrolledIndex({
        config,
        currentSlide: currentSlideIndex.value,
        slidesCount: slidesCount.value,
      })
    )

    const provided: InjectedCarousel = reactive({
      config,
      slidesCount,
      viewport,
      slides,
      clonedSlidesCount,
      scrolledIndex,
      currentSlide: currentSlideIndex,
      maxSlide: maxSlideIndex,
      minSlide: minSlideIndex,
      slideSize,
      isVertical,
      normalizedDir,
      nav,
      isSliding,
      registerSlide,
      unregisterSlide,
    })

    provide(injectCarousel, provided)
    /** @deprecated provides */
    provide('config', config)
    provide('slidesCount', slidesCount)
    provide('currentSlide', currentSlideIndex)
    provide('maxSlide', maxSlideIndex)
    provide('minSlide', minSlideIndex)
    provide('slideSize', slideSize)
    provide('isVertical', isVertical)
    provide('normalizeDir', normalizedDir)
    provide('nav', nav)
    provide('isSliding', isSliding)

    function restartCarousel(): void {
      updateBreakpointsConfig()
      updateSlidesData()
      updateSlideSize()
      resetAutoplay()
    }

    // Update the carousel on props change
    watch(
      () => [fallbackConfig.value, props.breakpoints],
      () => updateBreakpointsConfig(),
      { deep: true }
    )

    watch(
      () => props.autoplay,
      () => resetAutoplay()
    )

    // Handle changing v-model value
    const modelWatcher = watch(
      () => props.modelValue,
      (val) => {
        if (val === currentSlideIndex.value) {
          return
        }
        slideTo(Number(val), true)
      }
    )

    // Init carousel
    emit('before-init')

    const data = reactive<CarouselData>({
      config,
      slidesCount,
      slideSize,
      currentSlide: currentSlideIndex,
      maxSlide: maxSlideIndex,
      minSlide: minSlideIndex,
      middleSlide: middleSlideIndex,
    })

    expose<CarouselExposed>({
      updateBreakpointsConfig,
      updateSlidesData,
      updateSlideSize,
      restartCarousel,
      slideTo,
      next,
      prev,
      nav,
      data,
    })

    const trackHeight = computed(() => {
      if (isVertical.value && slideSize.value && config.height === 'auto') {
        return `${slideSize.value * config.itemsToShow + totalGap.value}px`
      }
      return config.height !== 'auto'
        ? typeof config.height === 'number' ||
          parseInt(config.height).toString() === config.height
          ? `${config.height}px`
          : config.height
        : undefined
    })

    /**
     * Track style
     */
    const trackTransform: ComputedRef<string> = computed(() => {
      // Calculate the scrolled index with wrapping offset if applicable
      const cloneOffset = config.wrapAround && mounted.value ? clonedSlidesCount.value : 0

      // Determine direction multiplier for orientation
      const directionMultiplier = isReversed.value ? -1 : 1

      // Calculate the total offset for slide transformation
      const totalOffset =
        (scrolledIndex.value + cloneOffset) *
        effectiveSlideSize.value *
        directionMultiplier

      // Include user drag interaction offset
      const dragOffset = isVertical.value ? dragged.y : dragged.x

      // Generate the appropriate CSS transformation
      const translateAxis = isVertical.value ? 'Y' : 'X'
      return `translate${translateAxis}(${dragOffset - totalOffset}px)`
    })

    return () => {
      const slotSlides = slots.default || slots.slides
      const slotAddons = slots.addons

      let output: VNode[] | Array<Array<VNode>> = slotSlides?.(data) || []

      if (!config.enabled || !output.length) {
        return h(
          'section',
          {
            ref: root,
            class: ['carousel', 'is-disabled'],
          },
          output
        )
      }

      const addonsElements = slotAddons?.(data) || []

      if (config.wrapAround) {
        const toShow = clonedSlidesCount.value
        const slidesBefore = createCloneSlides({ slides, position: 'before', toShow })
        const slidesAfter = createCloneSlides({ slides, position: 'after', toShow })
        output = [...slidesBefore, ...output, ...slidesAfter]
      }

      const trackEl = h(
        'ol',
        {
          class: 'carousel__track',
          style: {
            transform: trackTransform.value,
            'transition-duration': isSliding.value ? `${config.transition}ms` : undefined,
            gap: config.gap > 0 ? `${config.gap}px` : undefined,
          },
          onMousedownCapture: config.mouseDrag ? handleDragStart : null,
          onTouchstartPassiveCapture: config.touchDrag ? handleDragStart : null,
        },
        output
      )
      const viewPortEl = h('div', { class: 'carousel__viewport', ref: viewport }, trackEl)

      return h(
        'section',
        {
          ref: root,
          class: [
            'carousel',
            `is-${normalizedDir.value}`,
            {
              'is-vertical': isVertical.value,
              'is-sliding': isSliding.value,
              'is-dragging': isDragging.value,
              'is-hover': isHover.value,
            },
          ],
          style: {
            '--vc-trk-height': trackHeight.value,
          },
          dir: normalizedDir.value,
          'aria-label': config.i18n['ariaGallery'],
          tabindex: '0',
          onFocus: handleFocus,
          onBlur: handleBlur,
          onMouseenter: handleMouseEnter,
          onMouseleave: handleMouseLeave,
        },
        [viewPortEl, addonsElements, h(ARIAComponent)]
      )
    }
  },
})

declare enum IconName {
  arrowUp = 'arrowUp',
  arrowDown = 'arrowDown',
  arrowRight = 'arrowRight',
  arrowLeft = 'arrowLeft',
}

type IconNameValue = `${IconName}`

interface IconProps {
  title?: string
  name: IconNameValue
}

declare const icons = {
  arrowUp: 'M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z',
  arrowDown: 'M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z',
  arrowRight: 'M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z',
  arrowLeft: 'M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z',
}

declare const Icon = defineComponent<IconProps>({
  props: {
    name: {
      type: String as PropType<IconNameValue>,
      required: true,
      validator: validateIconName,
    },
    title: {
      type: String,
      default: (props: { name: IconNameValue }) =>
        props.name ? DEFAULT_CONFIG.i18n[iconI18n(props.name)] : '',
    },
  },
  setup(props) {
    const carousel = inject(injectCarousel, null)

    return () => {
      const iconName = props.name
      if (!iconName || !validateIconName(iconName)) return

      const path = icons[iconName]
      const pathEl = h('path', { d: path })

      const iconTitle: string =
        carousel?.config.i18n[iconI18n(iconName)] || props.title!

      const titleEl = h('title', iconTitle)

      return h(
        'svg',
        {
          class: 'carousel__icon',
          viewBox: '0 0 24 24',
          role: 'img',
          'aria-label': iconTitle,
        },
        [titleEl, pathEl]
      )
    }
  },
})

type NavigationProps = Record<never, never> // No props for now

declare const Navigation = defineComponent<NavigationProps>({
  name: 'CarouselNavigation',
  inheritAttrs: false,
  setup(props, { slots, attrs }) {
    const carousel = inject(injectCarousel)
    if (!carousel) {
      return () => '' // Don't render, let vue warn about the missing provide
    }
    const { next: slotNext, prev: slotPrev } = slots

    const getPrevIcon = () => {
      const directionIcons: Record<NormalizedDir, IconNameValue> = {
        ltr: 'arrowLeft',
        rtl: 'arrowRight',
        ttb: 'arrowUp',
        btt: 'arrowDown',
      }

      return directionIcons[carousel.normalizedDir]
    }
    const getNextIcon = () => {
      const directionIcons: Record<NormalizedDir, IconNameValue> = {
        ltr: 'arrowRight',
        rtl: 'arrowLeft',
        ttb: 'arrowDown',
        btt: 'arrowUp',
      }

      return directionIcons[carousel.normalizedDir]
    }

    const prevDisabled = computed(() => !carousel.config.wrapAround && carousel.currentSlide <= carousel.minSlide)
    const nextDisabled = computed(() => !carousel.config.wrapAround && carousel.currentSlide >= carousel.maxSlide)

    return () => {
      const { i18n } = carousel.config
      const prevButton = h(
        'button',
        {
          type: 'button',
          disabled: prevDisabled.value,
          'aria-label': i18n['ariaPreviousSlide'],
          title: i18n['ariaPreviousSlide'],
          onClick: carousel.nav.prev,
          ...attrs,
          class: [
            'carousel__prev',
            {'carousel__prev--disabled': prevDisabled.value},
            attrs.class,
          ],
        },
        slotPrev?.() || h(Icon, { name: getPrevIcon() })
      )
      const nextButton = h(
        'button',
        {
          type: 'button',
          disabled: nextDisabled.value,
          'aria-label': i18n['ariaNextSlide'],
          title: i18n['ariaNextSlide'],
          onClick: carousel.nav.next,
          ...attrs,
          class: [
            'carousel__next',
            {'carousel__next--disabled': nextDisabled.value},
            attrs.class,
          ],
        },
        slotNext?.() || h(Icon, { name: getNextIcon() })
      )

      return [prevButton, nextButton]
    }
  },
})

interface PaginationProps {
  disableOnClick?: boolean
  paginateByItemsToShow?: boolean
}

declare const Pagination = defineComponent<PaginationProps>({
  name: 'CarouselPagination',
  props: {
    disableOnClick: {
      type: Boolean,
    },
    paginateByItemsToShow: {
      type: Boolean
    },
  },
  setup(props) {
    const carousel = inject(injectCarousel)

    if (!carousel) {
      return () => '' // Don't render, let vue warn about the missing provide
    }

    const offset = computed(() => calculateOffset(carousel.config.snapAlign, carousel.config.itemsToShow))
    const isPaginated = computed(() => props.paginateByItemsToShow && carousel.config.itemsToShow > 1)
    const currentPage = computed(() =>
      Math.ceil((carousel.currentSlide - offset.value) / carousel.config.itemsToShow)
    )
    const pageCount = computed(() =>
      Math.ceil(carousel.slidesCount / carousel.config.itemsToShow)
    )

    const isActive = (slide: number): boolean =>
      mapNumberToRange(
        isPaginated.value
          ? {
              val: currentPage.value,
              max: pageCount.value - 1,
              min: 0,
            }
          : {
              val: carousel.currentSlide,
              max: carousel.maxSlide,
              min: carousel.minSlide,
            }
      ) === slide

    return () => {
      const children: Array<VNode> = []

      for (
        let slide = isPaginated.value ? 0 : carousel.minSlide;
        slide <= (isPaginated.value ? pageCount.value - 1 : carousel.maxSlide);
        slide++
      ) {
        const buttonLabel = i18nFormatter(
          carousel.config.i18n[
            isPaginated.value ? 'ariaNavigateToPage' : 'ariaNavigateToSlide'
          ],
          {
            slideNumber: slide + 1,
          }
        )
        const active = isActive(slide)
        const button = h('button', {
          type: 'button',
          class: {
            'carousel__pagination-button': true,
            'carousel__pagination-button--active': active,
          },
          'aria-label': buttonLabel,
          'aria-pressed': active,
          'aria-controls': carousel.slides[slide]?.exposed?.id,
          title: buttonLabel,
          disabled: props.disableOnClick,
          onClick: () => carousel.nav.slideTo(isPaginated.value ? slide * carousel.config.itemsToShow + offset.value : slide),
        })
        const item = h('li', { class: 'carousel__pagination-item', key: slide }, button)
        children.push(item)
      }

      return h('ol', { class: 'carousel__pagination' }, children)
    }
  },
})

interface SlideProps {
  id?: string
  index: number
  isClone?: boolean
}

declare const Slide = defineComponent({
  name: 'CarouselSlide',
  props: {
    isClone: {
      type: Boolean,
      default: false,
    },
    id: {
      type: String,
      default: (props: { isClone?: boolean }) => (props.isClone ? undefined : useId()),
    },
    index: {
      type: Number,
      default: 0,
    },
  },
  setup(props: DeepReadonly<SlideProps>, { slots, expose }: SetupContext) {
    const carousel = inject(injectCarousel)
    provide(injectCarousel, undefined) // Don't provide for nested slides

    if (!carousel) {
      return () => '' // Don't render, let vue warn about the missing provide
    }

    const index = ref(props.index)
    watch(() => props.index, (i) => index.value = i)

    const isActive: ComputedRef<boolean> = computed(
      () => index.value === carousel.currentSlide
    )
    const isPrev: ComputedRef<boolean> = computed(
      () => index.value === carousel.currentSlide - 1
    )
    const isNext: ComputedRef<boolean> = computed(
      () => index.value === carousel.currentSlide + 1
    )
    const isVisible: ComputedRef<boolean> = computed(
      () =>
        index.value >= Math.floor(carousel.scrolledIndex) &&
        index.value < Math.ceil(carousel.scrolledIndex) + carousel.config.itemsToShow
    )

    const slideStyle = computed(() => {
      const dimension =
        carousel.config.gap > 0 && carousel.config.itemsToShow > 1
          ? `calc(${100 / carousel.config.itemsToShow}% - ${
              (carousel.config.gap * (carousel.config.itemsToShow - 1)) /
              carousel.config.itemsToShow
            }px)`
          : `${100 / carousel.config.itemsToShow}%`

      return carousel.isVertical ? { height: dimension } : { width: dimension }
    })

    const instance = getCurrentInstance()!

    if (!props.isClone) {
      carousel.registerSlide(
        instance,
        (resolvedIndex: number) => (index.value = resolvedIndex)
      )
      onUnmounted(() => {
        carousel.unregisterSlide(instance)
      })
    } else {
      const makeUnfocusable = (node: VNode) => {
        ;[
          ...(node?.el
            ? node.el.querySelectorAll(
                'a[href], button, input, textarea, select, details, [tabindex]:not([tabindex="-1"])'
              )
            : []),
        ]
          .filter((el) => !el.hasAttribute('disabled') && !el.getAttribute('aria-hidden'))
          .forEach((el) => el.setAttribute('tabindex', '-1'))
      }
      // Prevent cloned slides from being focusable
      onMounted(() => {
        makeUnfocusable(instance.vnode)
      })
      onUpdated(() => {
        makeUnfocusable(instance.vnode)
      })
    }

    expose({
      id: props.id,
    })

    return () => {
      if (!carousel.config.enabled) {
        return slots.default?.()
      }

      return h(
        'li',
        {
          style: slideStyle.value,
          class: {
            carousel__slide: true,
            'carousel__slide--clone': props.isClone,
            'carousel__slide--visible': isVisible.value,
            'carousel__slide--active': isActive.value,
            'carousel__slide--prev': isPrev.value,
            'carousel__slide--next': isNext.value,
            'carousel__slide--sliding': carousel.isSliding,
          },
          onFocusin: () => {
            // Prevent the viewport being scrolled by the focus
            if (carousel.viewport) {
              carousel.viewport.scrollLeft = 0
            }
            carousel.nav.slideTo(index.value)
          },
          id: props.isClone ? undefined : props.id,
          'aria-hidden': props.isClone || undefined,
        },
        slots.default?.({
          isActive: isActive.value,
          isClone: props.isClone,
          isPrev: isPrev.value,
          isNext: isNext.value,
          isSliding: carousel.isSliding,
          isVisible: isVisible.value,
        })
      )
    }
  },
})

export { BREAKPOINT_MODE_OPTIONS, type BreakpointMode, type Breakpoints, Carousel, type CarouselConfig, type CarouselData, type CarouselExposed, type CarouselMethods, type CarouselNav, DEFAULT_CONFIG, DIR_MAP, DIR_OPTIONS, type Dir, I18N_DEFAULT_CONFIG, type I18nKeys, Icon, IconName, type IconNameValue, type IconProps, type InjectedCarousel, NORMALIZED_DIR_OPTIONS, Navigation, type NavigationProps, type NonNormalizedDir, type NormalizedDir, Pagination, type PaginationProps, SNAP_ALIGN_OPTIONS, Slide, type SlideProps, type SnapAlign, type VueClass, icons, injectCarousel };
